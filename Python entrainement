{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1V07wBQ5P8nDgDN55jKFyiTcE8gzz5SyK","timestamp":1697443610290},{"file_id":"11Cj8inhaGa7eadKatgHaNVtfToQEkt9v","timestamp":1697054332063},{"file_id":"1TY_R7WEPPFXARW5wRDn3bksy7Y59fv3u","timestamp":1604783608097},{"file_id":"1QEExt891XFwvVdvELiHrxAQEaeFdCmqe","timestamp":1584958296434},{"file_id":"1SpwnCFaykRtwuhq5QK4xBjPsKSeTG5yJ","timestamp":1566771593094},{"file_id":"1X3evw0_7w1K28-qMTTxIG_AVfLzCKQ9Q","timestamp":1566769588206}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zsHobPhC3ffd"},"source":["\n","## Mathematical functions that need coding\n","![Find x](https://www.mathwarehouse.com/jokes/images/find-x-funny-math-image-joke.webp)\n","\n","**Now the statisticians are begging you to code ready-made math functions for them. Below are the functions they use most often. Code the functions in the cells below:**\n","\n","- Square of a number: Create a function that returns the square of a number.\n","- Cube of a number: Create a function that returns the cube of a number.\n","- Absolute value: Create a function that returns the absolute value of a number.\n","- Factorial of a number: Create a function that returns the factorial of a number.\n","- Mode of a list of numbers: Create a function that returns the mode of a list of numbers, for instance [68, 99, 65, 44, 77, 44, 44] --> 44.\n","- Average of a list of numbers: Create a function that returns the average of a list of numbers.\n","- Minimum of a list of numbers: Create a function that returns the minimum from within a list of numbers.\n","- Maximum of a list of numbers: Create a function that returns the maximum from within a list of numbers.\n","\n","**Yes, all those functions already exist in dedicated modules, and you may not reuse them, unfortunately: you may only use loops, conditionals, basic structures, `len`, addition, subtraction, multiplication, division and powers.**\n","\n","**Don't forget to test your functions with at least two possible cases!**"]},{"cell_type":"code","source":[],"metadata":{"id":"F2NukpbGJ7LG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Optional Question: Create a function that returns the mode of a list of numbers when more than one modal value is present in a given data set. For example [68, 68, 68, 99, 65, 44, 77, 44, 44] --> [68, 44]"],"metadata":{"id":"l7a_3Ouqptmf"}},{"cell_type":"code","source":["# Square of a number: Create a function that returns the square of a number.\n","\n","def square(number):\n","\n","  return number**2\n","\n","resultat = square(5)\n","print(resultat)\n","\n"],"metadata":{"id":"2_z1MSfHuK1K","executionInfo":{"status":"ok","timestamp":1697457703307,"user_tz":-120,"elapsed":65,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b53c8802-7e50-4e27-9a5d-5033247c2779","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["25\n"]}]},{"cell_type":"code","source":["#Cube of a number: Create a function that returns the cube of a number.\n","def cube(number):\n","\n","  return number**3\n","\n","resultat = cube(5)\n","print(resultat)\n"],"metadata":{"id":"iL_51qnrIMfW","executionInfo":{"status":"ok","timestamp":1697457703307,"user_tz":-120,"elapsed":63,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"a36c33a9-a2fb-46c2-84c5-5244252dab89","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["125\n"]}]},{"cell_type":"code","source":["#Cube of a number: Create a function that returns the cube of a number.\n","def absolute(number):\n","  if number < 0:\n","   number *= -1\n","  return number\n","\n","resultat = absolute(4)\n","print(resultat)\n"],"metadata":{"id":"T9q5XhqOIgE_","executionInfo":{"status":"ok","timestamp":1697613800237,"user_tz":-120,"elapsed":320,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"5d856c6b-f9cb-4f50-e621-beb02a74b3e0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"code","source":["# Factorial of a number: Create a function that returns the factorial of a number.\n","\n","def factorielle(number):\n","    if number == 0:\n","        return 1\n","    else:\n","        return number * factorielle(number - 1)\n","\n","resultat = factorielle(7)\n","print(resultat)\n","\n","#####################################################################################################################\n","def factorial(value: int):\n","    if value < 0:\n","        raise ValueError\n","    if value == 0:\n","        return 1\n","    result = 1\n","    for i in range(1, value + 1):\n","        result *= i\n","    return result\n","\n","resultat = factorial(7)\n","print(resultat)\n","\n","#####################################################################################################################\n","\n","import math\n","\n","nombre = 7\n","resultat = math.factorial(nombre)\n","\n","print(f\"La factorielle de {nombre} est {resultat}\")\n","\n","\n","\n"],"metadata":{"id":"OVp3V750JrJK","executionInfo":{"status":"ok","timestamp":1697457703307,"user_tz":-120,"elapsed":55,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"df45b22f-cd17-43b2-8c64-4552b901c442","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5040\n","5040\n","La factorielle de 7 est 5040\n"]}]},{"cell_type":"code","source":["#Mode of a list of numbers: Create a function that returns the mode of a list of numbers, for instance [68, 99, 65, 44, 77, 44, 44] --> 44.\n","liste_mode = [68, 99, 65, 44, 77, 44, 44]\n","def mod(liste_mode):\n","  occurence = 0\n","  max_occurence = 0\n","\n","  for x in liste_mode :\n","    #print(f'{x} = {liste_mode.count(x)}')\n","    occurence = liste_mode.count(x)\n","    if occurence > max_occurence :\n","      max_occurence = occurence\n","\n","  occurence = 0\n","  for x in liste_mode :\n","    occurence = liste_mode.count(x)\n","    if max_occurence == occurence :\n","      print(f'The mode of this list is {x} with a max occurence of {max_occurence}')\n","      break\n","\n","mod(liste_mode)"],"metadata":{"id":"GTurMv3SUFmS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697457703307,"user_tz":-120,"elapsed":51,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"11d6f061-02c3-412a-9a07-162ea5f6fb1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The mode of this list is 44 with a max occurence of 3\n"]}]},{"cell_type":"code","source":["#Average of a list of numbers: Create a function that returns the average of a list of numbers.\n","\n","def average_list(liste):\n","\n","  return sum(liste) / len(liste)\n","\n","liste = [68, 99, 65, 44, 77, 44, 44]\n","average = average_list(liste)\n","\n","print(average)\n","\n","#######################################################################################################\n","\n","from statistics import mean\n","\n","def average_list(liste):\n","\n","    return mean(liste)\n","\n","liste = [68, 99, 65, 44, 77, 44, 44]\n","\n","average = average_list(liste)\n","print(f\"the average of the liste is {average}\")\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"01UFEN0LS0Qm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697457703307,"user_tz":-120,"elapsed":48,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b3001356-7efb-4ea9-e92a-3dfa151d2f5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["63.0\n","the average of the liste is 63\n"]}]},{"cell_type":"code","source":["#Minimum of a list of numbers: Create a function that returns the minimum from within a list of numbers.\n","#import random\n","\n","#def min_list_random_size(min_size, max_size):\n","    #size = random.randint(min_size, max_size)\n","    #n = [random.randint(-100, 100) for i in range(size)]\n","\n","    #if len(n) == 0:\n","        #return None\n","    #else:\n","        #n.sort()\n","        #return n[0]\n","\n","\n","#minimum_value = min_list_random_size(1, 20)\n","\n","#if minimum_value is not None:\n","    #print(\"La valeur minimale de la liste est :\", minimum_value)\n","#else:\n","    #print(\"La liste est vide.\")\n","\n","\n","##############################################################\n","\n","\n","def min_list(lst):\n","    if len(lst) == 0:\n","        return None  # Return None for an empty list\n","    else:\n","        lst.sort()\n","        return lst[0]\n","\n","my_list = [68, 99, 65, 44, 77, -100, 44]\n","minimum_value = min_list(my_list)\n","print(minimum_value)\n","\n","\n","\n","\n"],"metadata":{"id":"H0zq3UZKTGXV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697457703308,"user_tz":-120,"elapsed":20,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"166c91e5-5b3b-4a8d-8422-49ae31bd0342"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-100\n"]}]},{"cell_type":"code","source":["#Maximum of a list of numbers: Create a function that returns the maximum from within a list of numbers."],"metadata":{"id":"8dRnlCKxTKjV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#import random\n","\n","#def max_list_random_size(min_size, max_size):\n","    #size = random.randint(min_size, max_size)\n","    #n = [random.randint(-100, 100) for i in range(size)]\n","\n","    #if len(n) == 0:\n","        #return None\n","    #else:\n","        #n.sort()\n","        #return n[-1]\n","\n","#maximum_value = max_list_random_size(1, 20)\n","\n","#if maximum_value is not None:\n","    #print(\"La valeur maximale de la liste est :\", maximum_value)\n","#else:\n","    #print(\"La liste est vide.\")\n","\n","########################################################################################################################\"\n","\n","def max_list(lst):\n","    if len(lst) == 0:\n","        return None  # Return None for an empty list\n","    else:\n","        lst.sort()\n","        return lst[-1]\n","\n","my_list = [68, 99, 65, 44, 77, 44, 44]\n","maximum_value = max_list(my_list)\n","print(maximum_value)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xPOnJc1eec8N","executionInfo":{"status":"ok","timestamp":1697457703308,"user_tz":-120,"elapsed":13,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"7d9a47c4-b4de-4ac1-e071-44bf4b76a69d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["99\n"]}]},{"cell_type":"code","source":["$#Écrire un programme qui permet d’inverser les chiffres d’un nombre. Par exemple, 67531\n","\n","\n","var_numero = (input(\"écris un nombre\"))\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","#Create a function that returns the mode of a list of numbers, for instance [68, 99, 65, 44, 77, 44, 44]\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mZU-ogw4J9Ce","executionInfo":{"status":"ok","timestamp":1697457713095,"user_tz":-120,"elapsed":9796,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"e41a4d34-5e28-40eb-c4e2-c8892554b35a"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["écris un nombre879\n"]}]},{"cell_type":"code","source":["var_inverse = \"\"\n","for index in range(-1, - len(var_numero) - 1, -1):\n","  var_inverse += var_numero[index]\n","print(var_inverse)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVerGv8SMxKx","executionInfo":{"status":"ok","timestamp":1697457713095,"user_tz":-120,"elapsed":29,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"c927f87c-ff78-4fac-c275-f57c47423337"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["978\n"]}]},{"cell_type":"code","source":["print(len(var_numero))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PuoJoU3BMAvb","executionInfo":{"status":"ok","timestamp":1697457713096,"user_tz":-120,"elapsed":27,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"d3e7081c-7c0f-479f-f82f-51be137f09b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"code","source":["\n","#Écrire un programme permettant de calculer la factorielle d’un nombre choisi par l’utilisateur\n","\n","var_factorielle = int(input(\"ecris un nombre\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6LD4AzfuQtmG","executionInfo":{"status":"ok","timestamp":1697460698860,"user_tz":-120,"elapsed":3999,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b3860374-db1c-4e45-ec52-79d7463a2746"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["ecris un nombre6\n"]}]},{"cell_type":"code","source":["resultat = 1\n","for integer in range(1, var_factorielle + 1, 1):\n","  resultat *= integer\n","print(resultat)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5eCNXXVIRcxY","executionInfo":{"status":"ok","timestamp":1697460703846,"user_tz":-120,"elapsed":320,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"bb9a30b2-a24b-4153-9d0e-384bd2e2f1e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["720\n"]}]},{"cell_type":"code","source":["\n","#Create a function that returns the mode of a list of numbers, for instance [68, 99, 65, 44, 77, 44, 44]\n","previous_count = 0\n","liste = [68, 99, 65, 44, 77, 44, 44]\n","for numero in liste:\n","  count = 0\n","  #print(numero, end='')\n","  for index in range(len(liste)):\n","    #print(liste[index])\n","    if numero == liste[index]:\n","      count +=1\n","\n","  if previous_count == 0:\n","    previous_count = count\n","  else:\n","   if previous_count < count:\n","    print(f\"mon numéro {numero}: {count}\")\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jOEIcvU1Um8n","executionInfo":{"status":"ok","timestamp":1697460055212,"user_tz":-120,"elapsed":435,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"84c0a2c8-c1f4-4f24-8bd9-4181a25ec758"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mon numéro 44: 3\n","mon numéro 44: 3\n","mon numéro 44: 3\n"]}]}]}