{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPRQ72UvIQU3HHQ02GSouj7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkwtxC5UySQr","executionInfo":{"status":"ok","timestamp":1695303439756,"user_tz":-120,"elapsed":303,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"ffbf8466-f253-49c2-efc2-0933f121cffb"},"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0]\n"]}],"source":["list_pop = list(range(18,61))\n","counter = 0\n","\n","#for element in list_pop:\n","  #if element == 20:\n","    #print(counter)\n","  #counter += 1\n","\n","#tranche_age = list_pop[2:8]\n","#print(tranche_age)\n","\n","\n","#for element in enumerate(list_pop):\n","  #print(element)\n","\n","#appartement individuel  =0\n","#ppartement colloc = 1\n","#list aléatoire 100 personne\n","\n","#habitat = 0 (seul locataire), 1 je suis en colloc\n","\n","# démarer par le random randint\n","\n","import random\n","\n","#list_habitat = list(range(0, 100))\n","#print(list_habitat)\n","\n","habitat = [random.randint(0,1) for i in range(100)] ### créaton d'une liste\n","print(habitat)\n","\n","# l'index ou la clé chercher entre 18 et 61 et la valeur il va la chercher dans la liste habitat\n","\n","dict_info = {}\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","source":[],"metadata":{"id":"nG16UJ0Mr6XE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(random.randint(18,60), habitat[0])\n","print(random.randint(18,60), habitat[1])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eVwutPxs89Xx","executionInfo":{"status":"ok","timestamp":1695303572501,"user_tz":-120,"elapsed":595,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"c3b7feb5-b5c4-4135-ca67-00d740a71471"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["58 0\n","44 0\n"]}]},{"cell_type":"code","source":["list_pop = list(range(18,61))\n","list_age = [random.randint(18,60) for i in range (100)]\n","list_habitat = [random.randint(0,1) for i in range (100)]\n","\n","# combien de personnes de 32 vivent en appart seuls ?\n","counter = 0\n","\n","import random\n","\n","for loop in range(len(list_age)):\n","  if list_age[loop] == 32 and  list_habitat[loop] == 0:\n","    counter += 1\n","    #print(list_age[loop], list_habitat[loop] )\n","print(f\"J'ai {counter} personne(s) qui vivent seuls en appart\")\n","\n","# combien de personne de 20 - 25 qui vivent en colloc\n","\n","#tranche_age = list_pop[2:8]\n","\n","for loop in range(len(list_age)):\n","\n","  if list_age[loop] in tranche_age[2:8] and list_habitat[loop] == 1:\n","    counter += 1\n","\n","\n","print(f\"J'ai {counter} personne(s) qui vive(nt) en colloc\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Od35iBcY-LFC","executionInfo":{"status":"ok","timestamp":1695307343716,"user_tz":-120,"elapsed":14,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"02950dc8-ccd5-44c3-db5c-1075e83b9182"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["J'ai 0 personne(s) qui vivent seuls en appart\n","J'ai 5 personne(s) qui vive(nt) en colloc\n"]}]},{"cell_type":"code","source":["#### YAM\n","\n","### 5 clés\n","\n","### ramdon.randint => donne une valeur aléatoire\n","\n","import random\n","\n","list_de = list(random.randint(1, 6) for i in range (5)) # range représente le nbr de clé\n","#print(list_de)\n","\n","for loop in range(5):\n","\n","  print(f\"dé_{loop + 1} = {list_de[loop]}\", end=\"  \")\n","\n","choix_1 = list(input(\"quels dés veux-tu garder, si tu n'en gardes aucun, mets 0 \"))\n","\n","print(choix_1)\n","\n","while choix_1 not in [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]:\n","\n","  choix_1 = input(\"pour tes choix, tu ne peux utiliser que des valeurs de 0 à 5 \")\n","\n","print(\"le choix est valide\")\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x6WPLdvRMiVq","executionInfo":{"status":"ok","timestamp":1695310223416,"user_tz":-120,"elapsed":37914,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"c3b033f0-6ce9-41b4-8a21-b7a5d8196d3d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dé_1 = 6  dé_2 = 2  dé_3 = 6  dé_4 = 5  dé_5 = 4  quels dés veux-tu garder, si tu n'en gardes aucun, mets 0 7\n","['7']\n","pour tes choix, tu ne peux utiliser que des valeurs de 0 à 5 4\n","le choix est valide\n"]}]},{"cell_type":"code","source":["list_of_numbers = [2, 3, 4, 2, 6, 2, 9]\n","tuple_of_numbers = tuple(list_of_numbers)\n","set_of_numbers = set(list_of_numbers)  # This is how to make a set from a list\n","print('This is a: ', list_of_numbers)\n","print('This is a tuple: ', tuple_of_numbers)\n","print('This is a set: ', set_of_numbers)\n","print('Type of the variable set_of_numbers: ', type(set_of_numbers))"],"metadata":{"id":"87dOJFJlVnvg","executionInfo":{"status":"ok","timestamp":1695459116526,"user_tz":-120,"elapsed":8,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"85f9e1ae-88df-4662-bb09-4e397373e481"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is a:  [2, 3, 4, 2, 6, 2, 9]\n","This is a tuple:  (2, 3, 4, 2, 6, 2, 9)\n","This is a set:  {2, 3, 4, 6, 9}\n","Type of the variable set_of_numbers:  <class 'set'>\n"]}]},{"cell_type":"code","source":["list_of_values = [24, 55, 19, 71, 42, 48, 37, 25, 74, 17, 65, 72, 91, 70, 47, 50, 15, 48, 27, 60, 67, 3, 20, 82, 57, 9, 76, 70, 89, 19, 93, 26, 85, 87, 0, 15, 80, 23, 78, 78, 33, 36, 31, 72, 57, 0, 40, 28, 56, 8, 62, 78, 95, 31, 51, 39, 0, 14, 73, 75, 60, 38, 97, 21, 43, 44, 17, 23, 79, 69, 10, 95, 73, 8, 30, 70, 43, 2, 7, 30, 68, 59, 79, 4, 50, 96, 19, 90, 23, 67, 15, 85, 27, 61, 10, 15, 62, 64, 30, 36, 11]\n","print(f'Our list is {len(list_of_values)} values long.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JXmBq0w7QA9h","executionInfo":{"status":"ok","timestamp":1695459335979,"user_tz":-120,"elapsed":495,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"89ae45c3-961f-46ac-8455-f09b05a00ca3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Our list is [24, 55, 19, 71, 42, 48, 37, 25, 74, 17, 65, 72, 91, 70, 47, 50, 15, 48, 27, 60, 67, 3, 20, 82, 57, 9, 76, 70, 89, 19, 93, 26, 85, 87, 0, 15, 80, 23, 78, 78, 33, 36, 31, 72, 57, 0, 40, 28, 56, 8, 62, 78, 95, 31, 51, 39, 0, 14, 73, 75, 60, 38, 97, 21, 43, 44, 17, 23, 79, 69, 10, 95, 73, 8, 30, 70, 43, 2, 7, 30, 68, 59, 79, 4, 50, 96, 19, 90, 23, 67, 15, 85, 27, 61, 10, 15, 62, 64, 30, 36, 11] values long.\n"]}]},{"cell_type":"code","source":["set_of_values = set(list_of_values)\n","print(f'Our list is {len(set_of_values)} values long.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jket9Tj7Qbua","executionInfo":{"status":"ok","timestamp":1695459463605,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"c392da90-68ac-4c8a-b448-c0ec8779b5e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Our list is 68 values long.\n"]}]},{"cell_type":"code","source":["dictionary_for_count = {} # Notice the dictionary has the same {} sets have\n","for value in set_of_values:\n","  dictionary_for_count[value] = list_of_values.count(value)\n","print(dictionary_for_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SGsiCnLLQ02L","executionInfo":{"status":"ok","timestamp":1695459532591,"user_tz":-120,"elapsed":254,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"d3fc3a67-eeb2-4c70-d95c-7e0c27728c65"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: 3, 2: 1, 3: 1, 4: 1, 7: 1, 8: 2, 9: 1, 10: 2, 11: 1, 14: 1, 15: 4, 17: 2, 19: 3, 20: 1, 21: 1, 23: 3, 24: 1, 25: 1, 26: 1, 27: 2, 28: 1, 30: 3, 31: 2, 33: 1, 36: 2, 37: 1, 38: 1, 39: 1, 40: 1, 42: 1, 43: 2, 44: 1, 47: 1, 48: 2, 50: 2, 51: 1, 55: 1, 56: 1, 57: 2, 59: 1, 60: 2, 61: 1, 62: 2, 64: 1, 65: 1, 67: 2, 68: 1, 69: 1, 70: 3, 71: 1, 72: 2, 73: 2, 74: 1, 75: 1, 76: 1, 78: 3, 79: 2, 80: 1, 82: 1, 85: 2, 87: 1, 89: 1, 90: 1, 91: 1, 93: 1, 95: 2, 96: 1, 97: 1}\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140},"id":"kjscJXoERsah","executionInfo":{"status":"error","timestamp":1695459864296,"user_tz":-120,"elapsed":181,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"d02f3def-357c-4f5b-a282-42c4ac4f1005"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-11-ff4d1b72e2a2>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    thisset{1} = \"blueberry\"\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["a_set = {\"banana\", \"lemon\", \"lemon\", \"cherry\", \"lemon\", \"strawberry\", \"lemon\" }\n","\n","import random\n","b_set = set(a_set)\n","my_set = {random.randint(0,200) for i in range(1)}\n","\n","for i in b_set:\n","  if my_set not in b_set:\n","    a_set.update(my_set)\n","print(a_set)\n","\n","a_set = {\"banana\", \"grapes\", \"cherry\", \"pineapple\", \"kiwi\", \"strawberry\"}\n","\n","b_set = {\"lemon\", \"kiwi\", \"grapes\", \"blueberry\", \"watermelon\"}\n","\n","#for char in a_set:\n","  #if char in b_set:\n","    #my_common_elements.append(char)\n","#print(my_common_elements)"],"metadata":{"id":"MqeiWhIVp5Jj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def dice_roll_sum(coup_1, coup_2, coup_3):\n","   # les instructions ci-dessous\n","   total = coup_1 + coup_2 + coup_3\n","\n","   if total < 8:\n","      return \"bad bad not good\"\n","   elif total < 13:\n","      return \"good\"\n","   else:\n","      return \"amazing !\"\n","\n","dice_roll_sum(3,3,7)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"b-iAz5biCMa4","executionInfo":{"status":"ok","timestamp":1695472720923,"user_tz":-120,"elapsed":425,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"85685a48-af07-4b36-9b48-c4e1541e458e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'amazing !'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def hello_world():\n","   return \"Hello World\"\n","\n","\n","hello_world()\n","\"Hello World\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"XaP4HSCtEAyw","executionInfo":{"status":"ok","timestamp":1695472962054,"user_tz":-120,"elapsed":640,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"fa90748a-dfef-43aa-9bf6-4096b454fec8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Hello World'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import random\n","\"\"\"\n","Le module random de python permet de faire beaucoup de choses. On va utiliser la fonction randint pour\n","générer des valeurs aléatoires entre 1 et 6, pour chaque lancé de dé.\n","\"\"\"\n","final_players = 0 # On initialise un compteur à 0. Ce compteur compte le nombre de participants accédant à la finale.\n","\n","for i in range(32): # On fait une boucle en s'assurant que notre code exécute 32 fois notre fonction.\n","  result = dice_roll_sum(random.randint(1,6),random.randint(1,6),random.randint(1,6))\n","\"\"\"\n","Le résultat (\"bad bad not good\", \"good\" ou \"amazing !\" est attribué à chaque tour à la variable `result`.\n","\"\"\"\n","if result == \"amazing !\":\n","    final_players += 1\n","\n","\"\"\"\n","Si le résultat obtenu est \"amazing\", c'est que le joueur a fait un total supérieur à 12, et donc il est qualifié.\n","On ajoute 1 à la variable `final_players` à chaque fois qu'un joueur est qualifié.\n","\"\"\"\n","\n","print(final_players)\n","\n","8 # Il y a 8 joueurs qualifiés pour la première coupe du monde du lancé de dé en trois coups de l'histoire."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lhlo7ZNFEm5T","executionInfo":{"status":"ok","timestamp":1695473223826,"user_tz":-120,"elapsed":498,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"ff42ceb9-a7af-4065-fe55-e48ed4204907"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140},"id":"EtlR4Ji3r9wy","executionInfo":{"status":"error","timestamp":1696070810784,"user_tz":-120,"elapsed":214,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"bcb26fc0-c117-4eec-9434-1a644d3cf36d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-946e489be996>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    var str=\"My name is John\"\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["borne_1 : int(input(\"borne1\"))\n","borne_2 : int(input(\"borne2\"))\n","numero : int(input(\"entrer votre numéro:\"))\n","\n","\n","if numero > borne_1 and numero > borne_2:\n","  print(f\"Tu as entré {numero}, plus grand que {max(borne_1, borne_2)}, la borne supérieure\")"],"metadata":{"id":"0U1zcJelWBJc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dCrVsQqgZHN-"},"execution_count":null,"outputs":[]}]}