{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOtL0f7rr+zTyvYFI5O3R44"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Cq4Vsslpw-J8","executionInfo":{"status":"ok","timestamp":1705422051426,"user_tz":-60,"elapsed":2076,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns"]},{"cell_type":"code","source":["data = pd.read_csv('/content/breast-cancer-wisconsin.data')"],"metadata":{"id":"Q1VNXGfQzkEa","executionInfo":{"status":"ok","timestamp":1705422053603,"user_tz":-60,"elapsed":637,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"RUtjnkCRzwPg","executionInfo":{"status":"ok","timestamp":1705422055596,"user_tz":-60,"elapsed":204,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b5aceac8-b61b-4b2b-9309-52cfb1d7d07a"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     1000025  5   1  1.1  1.2  2 1.3   3  1.4  1.5  2.1\n","0    1002945  5   4    4    5  7  10   3    2    1    2\n","1    1015425  3   1    1    1  2   2   3    1    1    2\n","2    1016277  6   8    8    1  3   4   3    7    1    2\n","3    1017023  4   1    1    3  2   1   3    1    1    2\n","4    1017122  8  10   10    8  7  10   9    7    1    4\n","..       ... ..  ..  ...  ... ..  ..  ..  ...  ...  ...\n","693   776715  3   1    1    1  3   2   1    1    1    2\n","694   841769  2   1    1    1  2   1   1    1    1    2\n","695   888820  5  10   10    3  7   3   8   10    2    4\n","696   897471  4   8    6    4  3   4  10    6    1    4\n","697   897471  4   8    8    5  4   5  10    4    1    4\n","\n","[698 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-b11928e4-4921-46ab-a002-00c2a04ba8d0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1000025</th>\n","      <th>5</th>\n","      <th>1</th>\n","      <th>1.1</th>\n","      <th>1.2</th>\n","      <th>2</th>\n","      <th>1.3</th>\n","      <th>3</th>\n","      <th>1.4</th>\n","      <th>1.5</th>\n","      <th>2.1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1002945</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1015425</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1016277</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1017023</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1017122</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>9</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>693</th>\n","      <td>776715</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>694</th>\n","      <td>841769</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>695</th>\n","      <td>888820</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>696</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>697</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>698 rows Ã— 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b11928e4-4921-46ab-a002-00c2a04ba8d0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b11928e4-4921-46ab-a002-00c2a04ba8d0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b11928e4-4921-46ab-a002-00c2a04ba8d0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-af5058dd-8ce2-4da0-b5e9-963816396de3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af5058dd-8ce2-4da0-b5e9-963816396de3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-af5058dd-8ce2-4da0-b5e9-963816396de3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["data.columns = ['Sample Code Number','Clump Thickness','Uniformity of Cell Size',\n","                                                        'Uniformity of Cell Shape','Marginal Adhesion','Single Epithelial Cell Size',\n","                                                        'Bare Nuclei','Bland Chromatin','Normal Nucleoli','Mitoses','Class']"],"metadata":{"id":"Ep2gW_N6z-LR","executionInfo":{"status":"ok","timestamp":1705422058634,"user_tz":-60,"elapsed":493,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HjY6K6hAz_0t","executionInfo":{"status":"ok","timestamp":1705422061154,"user_tz":-60,"elapsed":624,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"082119b1-9f7b-4cd1-f609-a19d229eff2c"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sample Code Number             0\n","Clump Thickness                0\n","Uniformity of Cell Size        0\n","Uniformity of Cell Shape       0\n","Marginal Adhesion              0\n","Single Epithelial Cell Size    0\n","Bare Nuclei                    0\n","Bland Chromatin                0\n","Normal Nucleoli                0\n","Mitoses                        0\n","Class                          0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["!pip install tpot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c3D0tNyG0MXs","executionInfo":{"status":"ok","timestamp":1705422079137,"user_tz":-60,"elapsed":15675,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b4550edd-d702-4b17-ff77-6f1e19633fdc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tpot in /usr/local/lib/python3.10/dist-packages (0.12.1)\n","Requirement already satisfied: numpy>=1.16.3 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.23.5)\n","Requirement already satisfied: scipy>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.11.4)\n","Requirement already satisfied: scikit-learn>=0.22.0 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.2.2)\n","Requirement already satisfied: deap>=1.2 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.4.1)\n","Requirement already satisfied: update-checker>=0.16 in /usr/local/lib/python3.10/dist-packages (from tpot) (0.18.0)\n","Requirement already satisfied: tqdm>=4.36.1 in /usr/local/lib/python3.10/dist-packages (from tpot) (4.66.1)\n","Requirement already satisfied: stopit>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.1.2)\n","Requirement already satisfied: pandas>=0.24.2 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.5.3)\n","Requirement already satisfied: joblib>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from tpot) (1.3.2)\n","Requirement already satisfied: xgboost>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tpot) (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->tpot) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->tpot) (2023.3.post1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22.0->tpot) (3.2.0)\n","Requirement already satisfied: requests>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from update-checker>=0.16->tpot) (2.31.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=0.24.2->tpot) (1.16.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (2023.11.17)\n"]}]},{"cell_type":"code","source":["from tpot import TPOTClassifier"],"metadata":{"id":"ljjow2xQ2_0G","executionInfo":{"status":"ok","timestamp":1705422082697,"user_tz":-60,"elapsed":3593,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["pipeline_optimizer = TPOTClassifier()"],"metadata":{"id":"2LaL7JnJ3yyB","executionInfo":{"status":"ok","timestamp":1705422084204,"user_tz":-60,"elapsed":10,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":436},"id":"2rxMN8ki5LmA","executionInfo":{"status":"ok","timestamp":1705422088849,"user_tz":-60,"elapsed":822,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"ad25d91d-02e0-4363-b5d7-25936d5c3945"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Sample Code Number  Clump Thickness  Uniformity of Cell Size  \\\n","0               1002945                5                        4   \n","1               1015425                3                        1   \n","2               1016277                6                        8   \n","3               1017023                4                        1   \n","4               1017122                8                       10   \n","..                  ...              ...                      ...   \n","693              776715                3                        1   \n","694              841769                2                        1   \n","695              888820                5                       10   \n","696              897471                4                        8   \n","697              897471                4                        8   \n","\n","     Uniformity of Cell Shape  Marginal Adhesion  Single Epithelial Cell Size  \\\n","0                           4                  5                            7   \n","1                           1                  1                            2   \n","2                           8                  1                            3   \n","3                           1                  3                            2   \n","4                          10                  8                            7   \n","..                        ...                ...                          ...   \n","693                         1                  1                            3   \n","694                         1                  1                            2   \n","695                        10                  3                            7   \n","696                         6                  4                            3   \n","697                         8                  5                            4   \n","\n","    Bare Nuclei  Bland Chromatin  Normal Nucleoli  Mitoses  Class  \n","0            10                3                2        1      2  \n","1             2                3                1        1      2  \n","2             4                3                7        1      2  \n","3             1                3                1        1      2  \n","4            10                9                7        1      4  \n","..          ...              ...              ...      ...    ...  \n","693           2                1                1        1      2  \n","694           1                1                1        1      2  \n","695           3                8               10        2      4  \n","696           4               10                6        1      4  \n","697           5               10                4        1      4  \n","\n","[698 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-b09891ef-96c7-46a1-9273-a4dbaa8f2b07\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sample Code Number</th>\n","      <th>Clump Thickness</th>\n","      <th>Uniformity of Cell Size</th>\n","      <th>Uniformity of Cell Shape</th>\n","      <th>Marginal Adhesion</th>\n","      <th>Single Epithelial Cell Size</th>\n","      <th>Bare Nuclei</th>\n","      <th>Bland Chromatin</th>\n","      <th>Normal Nucleoli</th>\n","      <th>Mitoses</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1002945</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1015425</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1016277</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1017023</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1017122</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>9</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>693</th>\n","      <td>776715</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>694</th>\n","      <td>841769</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>695</th>\n","      <td>888820</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>696</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>697</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>698 rows Ã— 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b09891ef-96c7-46a1-9273-a4dbaa8f2b07')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b09891ef-96c7-46a1-9273-a4dbaa8f2b07 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b09891ef-96c7-46a1-9273-a4dbaa8f2b07');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9da04b4f-9fdb-41e6-a0d5-c79bd389a41b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9da04b4f-9fdb-41e6-a0d5-c79bd389a41b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9da04b4f-9fdb-41e6-a0d5-c79bd389a41b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3W_y-JWMhcBT","executionInfo":{"status":"ok","timestamp":1705422091631,"user_tz":-60,"elapsed":480,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b500cb26-2646-4310-a187-2674517ef439"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sample Code Number             0\n","Clump Thickness                0\n","Uniformity of Cell Size        0\n","Uniformity of Cell Shape       0\n","Marginal Adhesion              0\n","Single Epithelial Cell Size    0\n","Bare Nuclei                    0\n","Bland Chromatin                0\n","Normal Nucleoli                0\n","Mitoses                        0\n","Class                          0\n","dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data['Clump Thickness'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JHiCEVrIffzS","executionInfo":{"status":"ok","timestamp":1705422095976,"user_tz":-60,"elapsed":593,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"64148ea4-4cde-426b-98cf-e5ab8cfb4cc9"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 5,  3,  6,  4,  8,  1,  2,  7, 10,  9])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["data = data.drop(columns = ['Sample Code Number']) #Drop 1st column\n","data = data[data['Bare Nuclei'] != '?'] #Remove rows with missing data\n","data['Class'] = np.where(data['Class'] ==2,0,1) #Change the Class representation\n","data['Bare Nuclei'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zJ9DYkvn5Dab","executionInfo":{"status":"ok","timestamp":1705422099903,"user_tz":-60,"elapsed":487,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"18647b16-582b-4ea0-8872-1c26d9aa4c50"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1     401\n","10    132\n","2      30\n","5      30\n","3      28\n","8      21\n","4      19\n","9       9\n","7       8\n","6       4\n","Name: Bare Nuclei, dtype: int64"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["# Remplacer les ? par 1 (premiÃ¨re mÃ©thode)"],"metadata":{"id":"k9fBqFcOkmU7"}},{"cell_type":"code","source":["data['Bare Nuclei'].mode().values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ug1pRBtCkAUL","executionInfo":{"status":"ok","timestamp":1705422105424,"user_tz":-60,"elapsed":408,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"3030b671-3f02-422c-c604-7814f62833dc"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['1'], dtype=object)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["data['Bare Nuclei'].replace(\"?\", np.nan, inplace=True)\n","#data['Bare Nuclei'].fillna(data['Bare Nuclei'].mode().values[0],inplace=True)"],"metadata":{"id":"lvkcoTVTjFs7","executionInfo":{"status":"ok","timestamp":1705419939364,"user_tz":-60,"elapsed":371,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["data['Bare Nuclei'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7qXav7rjosP","executionInfo":{"status":"ok","timestamp":1705422113879,"user_tz":-60,"elapsed":475,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"b699fe3b-5a60-4c52-d72c-d943586896f9"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['10', '2', '4', '1', '3', '9', '7', '5', '8', '6'], dtype=object)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZWi1TjddpSpv","executionInfo":{"status":"ok","timestamp":1705422118704,"user_tz":-60,"elapsed":16,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"7d108b53-f457-4222-e2dd-db02c66f82b7"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Clump Thickness                0\n","Uniformity of Cell Size        0\n","Uniformity of Cell Shape       0\n","Marginal Adhesion              0\n","Single Epithelial Cell Size    0\n","Bare Nuclei                    0\n","Bland Chromatin                0\n","Normal Nucleoli                0\n","Mitoses                        0\n","Class                          0\n","dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["data['Bare Nuclei'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CROBaTql_6J1","executionInfo":{"status":"ok","timestamp":1705422121620,"user_tz":-60,"elapsed":518,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"de170d76-f376-40a7-9a55-5bf7842553bd"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1     401\n","10    132\n","2      30\n","5      30\n","3      28\n","8      21\n","4      19\n","9       9\n","7       8\n","6       4\n","Name: Bare Nuclei, dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["hist = data['Bare Nuclei'].hist(bins=3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"SkwM-nskDsBC","executionInfo":{"status":"ok","timestamp":1705422124963,"user_tz":-60,"elapsed":742,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"baac2b20-1951-4d94-b139-96ff7cbe1104"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Remplacer les ? par 1 (deuxiÃ¨me mÃ©thode)"],"metadata":{"id":"e3kgtpB9k4Gc"}},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer"],"metadata":{"id":"0OJ6VaGJk81N","executionInfo":{"status":"ok","timestamp":1705422136455,"user_tz":-60,"elapsed":322,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["SimpleImputer?"],"metadata":{"id":"DiAC-CxIhwBj","executionInfo":{"status":"ok","timestamp":1705419939693,"user_tz":-60,"elapsed":678,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# imputer = SimpleImputer(missing_values= np.nan,\n","#                         strategy = 'most_frequent',\n","#                         add_indicator= True)\n","# imputer.fit(data[['Bare Nuclei']])\n"],"metadata":{"id":"ddZwNnlEn-nY","executionInfo":{"status":"ok","timestamp":1705419939750,"user_tz":-60,"elapsed":259,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# imputer.transform([['Bare Nuclei']])"],"metadata":{"id":"Or2pCTQVofIB","executionInfo":{"status":"ok","timestamp":1705419939751,"user_tz":-60,"elapsed":258,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["data.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"glEiaS-CpYtq","executionInfo":{"status":"ok","timestamp":1705422151257,"user_tz":-60,"elapsed":497,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"fccb5c07-b19d-4cc3-dc30-dd734f8b045e"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Clump Thickness                 int64\n","Uniformity of Cell Size         int64\n","Uniformity of Cell Shape        int64\n","Marginal Adhesion               int64\n","Single Epithelial Cell Size     int64\n","Bare Nuclei                    object\n","Bland Chromatin                 int64\n","Normal Nucleoli                 int64\n","Mitoses                         int64\n","Class                           int64\n","dtype: object"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["from sklearn.compose import make_column_transformer\n","from sklearn.pipeline import make_pipeline\n","from sklearn import preprocessing\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"NStwNZafsu_a","executionInfo":{"status":"ok","timestamp":1705422166859,"user_tz":-60,"elapsed":381,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["imputer = SimpleImputer(missing_values=np.nan, strategy= 'most_frequent')"],"metadata":{"id":"DCV-2PvRs-iN","executionInfo":{"status":"ok","timestamp":1705419939751,"user_tz":-60,"elapsed":255,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#imputer.fit(data[['Bare Nuclei']])"],"metadata":{"id":"kTUCGU_a4YU-","executionInfo":{"status":"ok","timestamp":1705419939751,"user_tz":-60,"elapsed":254,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#imputer.transform(data[['Bare Nuclei']])"],"metadata":{"id":"LPkew2Lu4m0j","executionInfo":{"status":"ok","timestamp":1705419939751,"user_tz":-60,"elapsed":254,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["#data[['Bare Nuclei']].value_counts()"],"metadata":{"id":"koyoetBk5FVM","executionInfo":{"status":"ok","timestamp":1705419939751,"user_tz":-60,"elapsed":253,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["pipeline = make_pipeline(#SimpleImputer(strategy= 'most_frequent'),\n","                         StandardScaler()\n","                         )"],"metadata":{"id":"6YXZVB8K-cr4","executionInfo":{"status":"ok","timestamp":1705422190217,"user_tz":-60,"elapsed":341,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["preprocessing =make_column_transformer(\n","                                       (pipeline, ['Bare Nuclei'])\n","                                       )\n"],"metadata":{"id":"tepwZ1Kv6Zyo","executionInfo":{"status":"ok","timestamp":1705422194798,"user_tz":-60,"elapsed":533,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["preprocessing"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":115},"id":"pIO31H7y8p9c","executionInfo":{"status":"ok","timestamp":1705422198323,"user_tz":-60,"elapsed":517,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"0ba96c2e-bfaa-481a-81e7-ad4722bfe85e"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ColumnTransformer(transformers=[('pipeline',\n","                                 Pipeline(steps=[('standardscaler',\n","                                                  StandardScaler())]),\n","                                 ['Bare Nuclei'])])"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;Bare Nuclei&#x27;])])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;Bare Nuclei&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Bare Nuclei&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["preprocessing.fit_transform(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZjPsKl0L8j-d","executionInfo":{"status":"ok","timestamp":1705422209633,"user_tz":-60,"elapsed":418,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"ae491351-b8e6-4935-fc95-3a7d9de891c0"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.77117926],\n","       [-0.42508302],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.15055024],\n","       [ 1.49664647],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.9475809 ],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.9475809 ],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.9475809 ],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.49664647],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [-0.15055024],\n","       [ 0.12398255],\n","       [ 0.39851533],\n","       [ 1.22211369],\n","       [ 1.22211369],\n","       [ 0.39851533],\n","       [ 0.67304812],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.42508302],\n","       [-0.15055024],\n","       [-0.42508302],\n","       [ 1.22211369],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.49664647],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [ 1.49664647],\n","       [ 0.12398255],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.67304812],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.49664647],\n","       [-0.42508302],\n","       [ 1.49664647],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.15055024],\n","       [ 0.39851533],\n","       [-0.42508302],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 0.9475809 ],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.42508302],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.9475809 ],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.9475809 ],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.42508302],\n","       [ 1.49664647],\n","       [ 1.77117926],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [ 1.77117926],\n","       [ 1.49664647],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.9475809 ],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [ 0.9475809 ],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.49664647],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.22211369],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.12398255],\n","       [-0.15055024],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 0.67304812],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.15055024],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 1.77117926],\n","       [ 0.39851533],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.42508302],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [ 0.67304812],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [ 0.12398255],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [ 1.22211369],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 1.77117926],\n","       [ 1.77117926],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [ 0.39851533],\n","       [-0.69961581],\n","       [-0.69961581],\n","       [-0.42508302],\n","       [-0.69961581],\n","       [-0.15055024],\n","       [ 0.12398255],\n","       [ 0.39851533]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["X = data.drop(['Class'],axis='columns')\n","y = data['Class']"],"metadata":{"id":"Wsthh3Rl86zk","executionInfo":{"status":"ok","timestamp":1705422214106,"user_tz":-60,"elapsed":385,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["from sklearn.pipeline import Pipeline\n","from sklearn.linear_model import RidgeClassifier\n","from sklearn.neighbors import KNeighborsClassifier as KNN\n","from sklearn.ensemble import RandomForestClassifier as RandomForest"],"metadata":{"id":"UOBvs9aQWZYW","executionInfo":{"status":"ok","timestamp":1705422216711,"user_tz":-60,"elapsed":360,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import KFold"],"metadata":{"id":"dGMy7cxlWeQ1","executionInfo":{"status":"ok","timestamp":1705422219138,"user_tz":-60,"elapsed":692,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["cross_val_folds = KFold(n_splits= 5,\n","                        shuffle= True,\n","                        random_state=777\n","                        )"],"metadata":{"id":"WpJwyukOXPAE","executionInfo":{"status":"ok","timestamp":1705422221302,"user_tz":-60,"elapsed":680,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"yu8ylKulX8mH","executionInfo":{"status":"ok","timestamp":1705422228546,"user_tz":-60,"elapsed":399,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["knn = {}\n","\n","knn['pipeline'] = Pipeline([('preprocessing', preprocessing),\n","                      ('knn', KNN())\n","])\n","\n","knn['hyperparamÃ¨tres'] = {}\n","knn['hyperparamÃ¨tres']['knn__n_neighbors'] = [1, 3, 5, 7, 9, 13, 17, 21, 27, 29]\n","knn['hyperparamÃ¨tres']['knn__weights'] = ['uniform', 'distance']\n","\n","knn['gridsearch'] = GridSearchCV(estimator= knn['pipeline'],\n","                                 param_grid= knn['hyperparamÃ¨tres'],\n","                                 scoring = 'accuracy',\n","                                 cv = cross_val_folds)\n","knn['gridsearch'].fit(X,y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":213},"id":"cXgQ4CnzYhpF","executionInfo":{"status":"ok","timestamp":1705422232018,"user_tz":-60,"elapsed":1834,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"c515cc17-b494-441c-88d7-366f010a60c3"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[('preprocessing',\n","                                        ColumnTransformer(transformers=[('pipeline',\n","                                                                         Pipeline(steps=[('standardscaler',\n","                                                                                          StandardScaler())]),\n","                                                                         ['Bare '\n","                                                                          'Nuclei'])])),\n","                                       ('knn', KNeighborsClassifier())]),\n","             param_grid={'knn__n_neighbors': [1, 3, 5, 7, 9, 13, 17, 21, 27,\n","                                              29],\n","                         'knn__weights': ['uniform', 'distance']},\n","             scoring='accuracy')"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         [&#x27;Bare &#x27;\n","                                                                          &#x27;Nuclei&#x27;])])),\n","                                       (&#x27;knn&#x27;, KNeighborsClassifier())]),\n","             param_grid={&#x27;knn__n_neighbors&#x27;: [1, 3, 5, 7, 9, 13, 17, 21, 27,\n","                                              29],\n","                         &#x27;knn__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         [&#x27;Bare &#x27;\n","                                                                          &#x27;Nuclei&#x27;])])),\n","                                       (&#x27;knn&#x27;, KNeighborsClassifier())]),\n","             param_grid={&#x27;knn__n_neighbors&#x27;: [1, 3, 5, 7, 9, 13, 17, 21, 27,\n","                                              29],\n","                         &#x27;knn__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;Bare Nuclei&#x27;])])),\n","                (&#x27;knn&#x27;, KNeighborsClassifier())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessing: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;Bare Nuclei&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Bare Nuclei&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["ridge= {}\n","\n","ridge['pipeline'] = Pipeline([('preprocessing', preprocessing),\n","                      ('ridge', RidgeClassifier())\n","])\n","\n","ridge['hyperparamÃ¨tres'] = {}\n","ridge['hyperparamÃ¨tres']['ridge__alpha'] = [8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4,9.5, 10 ]\n","\n","\n","ridge['gridsearch'] = GridSearchCV(estimator= ridge['pipeline'],\n","                                 param_grid= ridge['hyperparamÃ¨tres'],\n","                                 scoring = 'balanced_accuracy',\n","                                 cv = cross_val_folds)\n","\n","ridge['gridsearch'].fit(X, y)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":213},"id":"nTUWBemIZDjc","executionInfo":{"status":"ok","timestamp":1705422235956,"user_tz":-60,"elapsed":1017,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"49836a8b-fb6f-4432-ff4e-fbd5f117d3a4"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[('preprocessing',\n","                                        ColumnTransformer(transformers=[('pipeline',\n","                                                                         Pipeline(steps=[('standardscaler',\n","                                                                                          StandardScaler())]),\n","                                                                         ['Bare '\n","                                                                          'Nuclei'])])),\n","                                       ('ridge', RidgeClassifier())]),\n","             param_grid={'ridge__alpha': [8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2,\n","                                          9.3, 9.4, 9.5, 10]},\n","             scoring='balanced_accuracy')"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         [&#x27;Bare &#x27;\n","                                                                          &#x27;Nuclei&#x27;])])),\n","                                       (&#x27;ridge&#x27;, RidgeClassifier())]),\n","             param_grid={&#x27;ridge__alpha&#x27;: [8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2,\n","                                          9.3, 9.4, 9.5, 10]},\n","             scoring=&#x27;balanced_accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=5, random_state=777, shuffle=True),\n","             estimator=Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         [&#x27;Bare &#x27;\n","                                                                          &#x27;Nuclei&#x27;])])),\n","                                       (&#x27;ridge&#x27;, RidgeClassifier())]),\n","             param_grid={&#x27;ridge__alpha&#x27;: [8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2,\n","                                          9.3, 9.4, 9.5, 10]},\n","             scoring=&#x27;balanced_accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;preprocessing&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;Bare Nuclei&#x27;])])),\n","                (&#x27;ridge&#x27;, RidgeClassifier())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">preprocessing: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;Bare Nuclei&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Bare Nuclei&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RidgeClassifier</label><div class=\"sk-toggleable__content\"><pre>RidgeClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# rf= {}\n","\n","# rf['pipeline'] = Pipeline([('preprocessing', preprocessing),\n","#                       ('rf', RandomForest())\n","# ])\n","\n","# rf['hyperparamÃ¨tres'] = {}\n","# rf['hyperparamÃ¨tres']['rf__n_estimators'] = [10, 33, 150]\n","# rf['hyperparamÃ¨tres']['rf__max_features'] = ['sqrt', None, 0.1, 0.34, 0.66, 0.85]\n","\n","# rf['hyperparamÃ¨tres']['rf__max_depth'] = [None, 2, 6, 10]\n","# rf['hyperparamÃ¨tres']['rf__min_samples_split'] = [2, 5, 10]\n","\n","# rf['gridsearch'] = GridSearchCV(estimator= rf['pipeline'],\n","#                                  param_grid= rf['hyperparamÃ¨tres'],\n","#                                  scoring = 'balanced_accuracy',\n","#                                  cv = cross_val_folds)\n","\n","# rf['gridsearch'].fit(X, y)"],"metadata":{"id":"aqEcyhY0ZOui","executionInfo":{"status":"ok","timestamp":1705419943482,"user_tz":-60,"elapsed":225,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["knn['gridsearch'].best_score_, ridge['gridsearch'].best_score_, rf['gridsearch'].best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"PaHZ3-SJZ9zV","executionInfo":{"status":"error","timestamp":1705419943482,"user_tz":-60,"elapsed":218,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"2258c260-40cd-4830-af7f-46317a953ecf"},"execution_count":39,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'rf' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-7467c0a82c32>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mknn\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'gridsearch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mridge\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'gridsearch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'gridsearch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_score_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'rf' is not defined"]}]},{"cell_type":"code","source":["sns.lineplot(data = data, x= data['Bare Nuclei'], y= data['Class'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"X98Y1ohZ_eTJ","executionInfo":{"status":"ok","timestamp":1705422243228,"user_tz":-60,"elapsed":1354,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"83a919bd-b246-4bd1-9a5c-5819b570af2e"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Bare Nuclei', ylabel='Class'>"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## AUTOML\n"],"metadata":{"id":"ZCXwRkL8huJE"}},{"cell_type":"code","source":["pipeline_optimizer = TPOTClassifier(generations = 2, population_size= 50, # cb de modÃ¨le vont Ãªtre utiliser\n","                        scoring = 'balanced_accuracy',\n","                        cv= 5,\n","                        config_dict='TPOT sparse', # notre entrÃ©e utilise des tech sparse\n","                        verbosity= 2, # dÃ©finis la quantitÃ© de texte gÃ©nÃ©rÃ© lors de l'entrainement\n","                        random_state=42,\n","                        n_jobs = -1, # permet d'utiliser tous les CPE\n",")"],"metadata":{"id":"U_Tl8Vly30A2","executionInfo":{"status":"ok","timestamp":1705421161211,"user_tz":-60,"elapsed":804,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["pipeline_optimizer.fit(X, y)"],"metadata":{"id":"OFIhgKMra_1C","executionInfo":{"status":"aborted","timestamp":1705419943482,"user_tz":-60,"elapsed":215,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pipeline_optimizer.export('training.py')"],"metadata":{"id":"jCpvNRAncLQs","executionInfo":{"status":"aborted","timestamp":1705419943482,"user_tz":-60,"elapsed":215,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!cat training.py"],"metadata":{"id":"jiubu6bzcSHF","executionInfo":{"status":"aborted","timestamp":1705419943483,"user_tz":-60,"elapsed":215,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pipeline_optimizer.fit(X,y)"],"metadata":{"id":"siwON0xA38xr","executionInfo":{"status":"aborted","timestamp":1705419943483,"user_tz":-60,"elapsed":215,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Pipeline Finale\n"],"metadata":{"id":"7wKZHV9vhvm8"}},{"cell_type":"code","source":["final_pipeline = make_pipeline(preprocessing, RandomForest(bootstrap=True,\n","                                                        criterion=\"gini\",\n","                                                        max_features=0.2,\n","                                                        min_samples_leaf=10,\n","                                                        min_samples_split=18,\n","                                                        n_estimators=100,\n","                                                        class_weight={1 : 20}))"],"metadata":{"id":"TLWyF-pg7Bny","executionInfo":{"status":"ok","timestamp":1705422252877,"user_tz":-60,"elapsed":421,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["final_pipeline.fit(X, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":188},"id":"eQ0qgRCMdAZX","executionInfo":{"status":"ok","timestamp":1705422256213,"user_tz":-60,"elapsed":504,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"4dc72954-d488-442e-9cb2-eaeb7015fb8a"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('columntransformer',\n","                 ColumnTransformer(transformers=[('pipeline',\n","                                                  Pipeline(steps=[('standardscaler',\n","                                                                   StandardScaler())]),\n","                                                  ['Bare Nuclei'])])),\n","                ('randomforestclassifier',\n","                 RandomForestClassifier(class_weight={1: 20}, max_features=0.2,\n","                                        min_samples_leaf=10,\n","                                        min_samples_split=18))])"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;Bare Nuclei&#x27;])])),\n","                (&#x27;randomforestclassifier&#x27;,\n","                 RandomForestClassifier(class_weight={1: 20}, max_features=0.2,\n","                                        min_samples_leaf=10,\n","                                        min_samples_split=18))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  [&#x27;Bare Nuclei&#x27;])])),\n","                (&#x27;randomforestclassifier&#x27;,\n","                 RandomForestClassifier(class_weight={1: 20}, max_features=0.2,\n","                                        min_samples_leaf=10,\n","                                        min_samples_split=18))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 [&#x27;Bare Nuclei&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Bare Nuclei&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(class_weight={1: 20}, max_features=0.2,\n","                       min_samples_leaf=10, min_samples_split=18)</pre></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["final_pipeline.predict(data)"],"metadata":{"id":"SBfpAXB536ld","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705422260246,"user_tz":-60,"elapsed":456,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"28984dc2-b6b3-4324-fa02-9dd77c5445d9"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0,\n","       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1,\n","       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n","       0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1,\n","       1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,\n","       1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,\n","       1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n","       1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0,\n","       1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1,\n","       1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,\n","       1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,\n","       1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n","       1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0,\n","       1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,\n","       1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,\n","       1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n","       0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,\n","       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n","       1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,\n","       1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1])"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["np.array(y)"],"metadata":{"id":"FzxC1pzCm08L","executionInfo":{"status":"aborted","timestamp":1705419943484,"user_tz":-60,"elapsed":214,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"id":"0Gct_Tf7ruYG","executionInfo":{"status":"aborted","timestamp":1705419943484,"user_tz":-60,"elapsed":214,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sns.scatterplot(data=final_pipeline )\n"],"metadata":{"id":"6Wyi1nKSrK8F","executionInfo":{"status":"aborted","timestamp":1705419943484,"user_tz":-60,"elapsed":213,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix"],"metadata":{"id":"ix_lv8Hb3Hsn","executionInfo":{"status":"ok","timestamp":1705422275900,"user_tz":-60,"elapsed":497,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# final_pipeline.classes_\n","# np.array([\"0\"],[\"1\"])"],"metadata":{"id":"_PomSgsWjVNZ","executionInfo":{"status":"aborted","timestamp":1705419943485,"user_tz":-60,"elapsed":214,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["display(pd.DataFrame(confusion_matrix(y_true = y, y_pred = final_pipeline.predict(data)),\n","                columns = np.array([str(i) for i in final_pipeline.classes_]).astype(object) + ' predicted',\n","                index = np.array([str(i) for i in final_pipeline.classes_]).astype(object) + ' actual'\n","                ))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":111},"id":"OgXuqqI-gXFu","executionInfo":{"status":"ok","timestamp":1705422277921,"user_tz":-60,"elapsed":707,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"8ec3c0bf-38b2-4af4-9e35-9d329bbba707"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["          0 predicted  1 predicted\n","0 actual          386           57\n","1 actual           15          224"],"text/html":["\n","  <div id=\"df-19a0c2a7-9083-4d72-830e-cd353b32e3d1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0 predicted</th>\n","      <th>1 predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0 actual</th>\n","      <td>386</td>\n","      <td>57</td>\n","    </tr>\n","    <tr>\n","      <th>1 actual</th>\n","      <td>15</td>\n","      <td>224</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19a0c2a7-9083-4d72-830e-cd353b32e3d1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-19a0c2a7-9083-4d72-830e-cd353b32e3d1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-19a0c2a7-9083-4d72-830e-cd353b32e3d1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cb9af7e3-a68a-4160-ad17-319164bc92c8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb9af7e3-a68a-4160-ad17-319164bc92c8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cb9af7e3-a68a-4160-ad17-319164bc92c8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["- 22 personnes ont Ã©tÃ© prÃ©dictes malades alors qu'elles ne le sont pas\n","- 40 personnes ont Ã©tÃ© prÃ©dictes non malade alors qu'elles le sont\n","\n","\n","\n"],"metadata":{"id":"ZFC6S5s1ofIe"}},{"cell_type":"code","source":["[str(i) for i in final_pipeline.classes_]"],"metadata":{"id":"ndwYHfqqiskX","executionInfo":{"status":"aborted","timestamp":1705419943485,"user_tz":-60,"elapsed":213,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression"],"metadata":{"id":"jl56zaQFi8DK","executionInfo":{"status":"aborted","timestamp":1705419943485,"user_tz":-60,"elapsed":212,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["LogisticRegression?"],"metadata":{"id":"UvbfwNNzvC18","executionInfo":{"status":"aborted","timestamp":1705419943485,"user_tz":-60,"elapsed":212,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n"],"metadata":{"id":"670wDV9O0zbf","executionInfo":{"status":"ok","timestamp":1705422294492,"user_tz":-60,"elapsed":19,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["corr_matrix = data.corrwith(data['Class'])\n","sns.heatmap(corr_matrix.to_frame(), annot=True, fmt=\".2f\", vmin=-1, vmax=1, center=0, cmap='vlag')\n","plt.title('ReprÃ©sentation des corrÃ©lations entre les diffÃ©rentes colonnes et \"price\"')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"j38TVJmFyRzI","executionInfo":{"status":"ok","timestamp":1705422298264,"user_tz":-60,"elapsed":1358,"user":{"displayName":"Maxwell PERRIN","userId":"10169933277656860139"}},"outputId":"142edcc9-016a-47ef-b291-81f5b99428ef"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-41-4d9e0a265979>:1: FutureWarning: The default value of numeric_only in DataFrame.corrwith is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  corr_matrix = data.corrwith(data['Class'])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}